// Generated by gencpp from file penu/Sensor.msg
// DO NOT EDIT!


#ifndef PENU_MESSAGE_SENSOR_H
#define PENU_MESSAGE_SENSOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace penu
{
template <class ContainerAllocator>
struct Sensor_
{
  typedef Sensor_<ContainerAllocator> Type;

  Sensor_()
    : pre_FB1(0.0)
    , pre_FB2(0.0)
    , pre_FB3(0.0)
    , pre_FB4(0.0)
    , len_FB1(0.0)
    , len_FB2(0.0)
    , len_FB3(0.0)
    , len_FB4(0.0)  {
    }
  Sensor_(const ContainerAllocator& _alloc)
    : pre_FB1(0.0)
    , pre_FB2(0.0)
    , pre_FB3(0.0)
    , pre_FB4(0.0)
    , len_FB1(0.0)
    , len_FB2(0.0)
    , len_FB3(0.0)
    , len_FB4(0.0)  {
  (void)_alloc;
    }



   typedef double _pre_FB1_type;
  _pre_FB1_type pre_FB1;

   typedef double _pre_FB2_type;
  _pre_FB2_type pre_FB2;

   typedef double _pre_FB3_type;
  _pre_FB3_type pre_FB3;

   typedef double _pre_FB4_type;
  _pre_FB4_type pre_FB4;

   typedef double _len_FB1_type;
  _len_FB1_type len_FB1;

   typedef double _len_FB2_type;
  _len_FB2_type len_FB2;

   typedef double _len_FB3_type;
  _len_FB3_type len_FB3;

   typedef double _len_FB4_type;
  _len_FB4_type len_FB4;





  typedef boost::shared_ptr< ::penu::Sensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::penu::Sensor_<ContainerAllocator> const> ConstPtr;

}; // struct Sensor_

typedef ::penu::Sensor_<std::allocator<void> > Sensor;

typedef boost::shared_ptr< ::penu::Sensor > SensorPtr;
typedef boost::shared_ptr< ::penu::Sensor const> SensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::penu::Sensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::penu::Sensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::penu::Sensor_<ContainerAllocator1> & lhs, const ::penu::Sensor_<ContainerAllocator2> & rhs)
{
  return lhs.pre_FB1 == rhs.pre_FB1 &&
    lhs.pre_FB2 == rhs.pre_FB2 &&
    lhs.pre_FB3 == rhs.pre_FB3 &&
    lhs.pre_FB4 == rhs.pre_FB4 &&
    lhs.len_FB1 == rhs.len_FB1 &&
    lhs.len_FB2 == rhs.len_FB2 &&
    lhs.len_FB3 == rhs.len_FB3 &&
    lhs.len_FB4 == rhs.len_FB4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::penu::Sensor_<ContainerAllocator1> & lhs, const ::penu::Sensor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace penu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::penu::Sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::penu::Sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::penu::Sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::penu::Sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::penu::Sensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::penu::Sensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::penu::Sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8eea295248949e2a5a16594e9f20e338";
  }

  static const char* value(const ::penu::Sensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8eea295248949e2aULL;
  static const uint64_t static_value2 = 0x5a16594e9f20e338ULL;
};

template<class ContainerAllocator>
struct DataType< ::penu::Sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "penu/Sensor";
  }

  static const char* value(const ::penu::Sensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::penu::Sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# pressure measurement\n"
"float64 pre_FB1\n"
"float64 pre_FB2\n"
"float64 pre_FB3\n"
"float64 pre_FB4\n"
"# cable measurement\n"
"float64 len_FB1\n"
"float64 len_FB2\n"
"float64 len_FB3\n"
"float64 len_FB4\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::penu::Sensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::penu::Sensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pre_FB1);
      stream.next(m.pre_FB2);
      stream.next(m.pre_FB3);
      stream.next(m.pre_FB4);
      stream.next(m.len_FB1);
      stream.next(m.len_FB2);
      stream.next(m.len_FB3);
      stream.next(m.len_FB4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::penu::Sensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::penu::Sensor_<ContainerAllocator>& v)
  {
    s << indent << "pre_FB1: ";
    Printer<double>::stream(s, indent + "  ", v.pre_FB1);
    s << indent << "pre_FB2: ";
    Printer<double>::stream(s, indent + "  ", v.pre_FB2);
    s << indent << "pre_FB3: ";
    Printer<double>::stream(s, indent + "  ", v.pre_FB3);
    s << indent << "pre_FB4: ";
    Printer<double>::stream(s, indent + "  ", v.pre_FB4);
    s << indent << "len_FB1: ";
    Printer<double>::stream(s, indent + "  ", v.len_FB1);
    s << indent << "len_FB2: ";
    Printer<double>::stream(s, indent + "  ", v.len_FB2);
    s << indent << "len_FB3: ";
    Printer<double>::stream(s, indent + "  ", v.len_FB3);
    s << indent << "len_FB4: ";
    Printer<double>::stream(s, indent + "  ", v.len_FB4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PENU_MESSAGE_SENSOR_H
