// Generated by gencpp from file penu/PreCmd.msg
// DO NOT EDIT!


#ifndef PENU_MESSAGE_PRECMD_H
#define PENU_MESSAGE_PRECMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace penu
{
template <class ContainerAllocator>
struct PreCmd_
{
  typedef PreCmd_<ContainerAllocator> Type;

  PreCmd_()
    : pre_cmd1(0)
    , pre_cmd2(0)
    , pre_cmd3(0)
    , pre_cmd4(0)  {
    }
  PreCmd_(const ContainerAllocator& _alloc)
    : pre_cmd1(0)
    , pre_cmd2(0)
    , pre_cmd3(0)
    , pre_cmd4(0)  {
  (void)_alloc;
    }



   typedef uint16_t _pre_cmd1_type;
  _pre_cmd1_type pre_cmd1;

   typedef uint16_t _pre_cmd2_type;
  _pre_cmd2_type pre_cmd2;

   typedef uint16_t _pre_cmd3_type;
  _pre_cmd3_type pre_cmd3;

   typedef uint16_t _pre_cmd4_type;
  _pre_cmd4_type pre_cmd4;





  typedef boost::shared_ptr< ::penu::PreCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::penu::PreCmd_<ContainerAllocator> const> ConstPtr;

}; // struct PreCmd_

typedef ::penu::PreCmd_<std::allocator<void> > PreCmd;

typedef boost::shared_ptr< ::penu::PreCmd > PreCmdPtr;
typedef boost::shared_ptr< ::penu::PreCmd const> PreCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::penu::PreCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::penu::PreCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::penu::PreCmd_<ContainerAllocator1> & lhs, const ::penu::PreCmd_<ContainerAllocator2> & rhs)
{
  return lhs.pre_cmd1 == rhs.pre_cmd1 &&
    lhs.pre_cmd2 == rhs.pre_cmd2 &&
    lhs.pre_cmd3 == rhs.pre_cmd3 &&
    lhs.pre_cmd4 == rhs.pre_cmd4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::penu::PreCmd_<ContainerAllocator1> & lhs, const ::penu::PreCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace penu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::penu::PreCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::penu::PreCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::penu::PreCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::penu::PreCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::penu::PreCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::penu::PreCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::penu::PreCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "21ac01ccfc8745d307c8c5b188f365f9";
  }

  static const char* value(const ::penu::PreCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x21ac01ccfc8745d3ULL;
  static const uint64_t static_value2 = 0x07c8c5b188f365f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::penu::PreCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "penu/PreCmd";
  }

  static const char* value(const ::penu::PreCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::penu::PreCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# pressure control command\n"
"uint16 pre_cmd1\n"
"uint16 pre_cmd2\n"
"uint16 pre_cmd3\n"
"uint16 pre_cmd4\n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::penu::PreCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::penu::PreCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pre_cmd1);
      stream.next(m.pre_cmd2);
      stream.next(m.pre_cmd3);
      stream.next(m.pre_cmd4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PreCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::penu::PreCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::penu::PreCmd_<ContainerAllocator>& v)
  {
    s << indent << "pre_cmd1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pre_cmd1);
    s << indent << "pre_cmd2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pre_cmd2);
    s << indent << "pre_cmd3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pre_cmd3);
    s << indent << "pre_cmd4: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pre_cmd4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PENU_MESSAGE_PRECMD_H
