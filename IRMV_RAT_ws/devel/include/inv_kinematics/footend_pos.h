// Generated by gencpp from file inv_kinematics/footend_pos.msg
// DO NOT EDIT!


#ifndef INV_KINEMATICS_MESSAGE_FOOTEND_POS_H
#define INV_KINEMATICS_MESSAGE_FOOTEND_POS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace inv_kinematics
{
template <class ContainerAllocator>
struct footend_pos_
{
  typedef footend_pos_<ContainerAllocator> Type;

  footend_pos_()
    : footend_FL()
    , footend_FR()
    , footend_BL()
    , footend_BR()  {
    }
  footend_pos_(const ContainerAllocator& _alloc)
    : footend_FL(_alloc)
    , footend_FR(_alloc)
    , footend_BL(_alloc)
    , footend_BR(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _footend_FL_type;
  _footend_FL_type footend_FL;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _footend_FR_type;
  _footend_FR_type footend_FR;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _footend_BL_type;
  _footend_BL_type footend_BL;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _footend_BR_type;
  _footend_BR_type footend_BR;





  typedef boost::shared_ptr< ::inv_kinematics::footend_pos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::inv_kinematics::footend_pos_<ContainerAllocator> const> ConstPtr;

}; // struct footend_pos_

typedef ::inv_kinematics::footend_pos_<std::allocator<void> > footend_pos;

typedef boost::shared_ptr< ::inv_kinematics::footend_pos > footend_posPtr;
typedef boost::shared_ptr< ::inv_kinematics::footend_pos const> footend_posConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::inv_kinematics::footend_pos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::inv_kinematics::footend_pos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::inv_kinematics::footend_pos_<ContainerAllocator1> & lhs, const ::inv_kinematics::footend_pos_<ContainerAllocator2> & rhs)
{
  return lhs.footend_FL == rhs.footend_FL &&
    lhs.footend_FR == rhs.footend_FR &&
    lhs.footend_BL == rhs.footend_BL &&
    lhs.footend_BR == rhs.footend_BR;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::inv_kinematics::footend_pos_<ContainerAllocator1> & lhs, const ::inv_kinematics::footend_pos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace inv_kinematics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::inv_kinematics::footend_pos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inv_kinematics::footend_pos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::inv_kinematics::footend_pos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::inv_kinematics::footend_pos_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inv_kinematics::footend_pos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inv_kinematics::footend_pos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::inv_kinematics::footend_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e96999e07cf2518ba50b0eeed74e99c";
  }

  static const char* value(const ::inv_kinematics::footend_pos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e96999e07cf2518ULL;
  static const uint64_t static_value2 = 0xba50b0eeed74e99cULL;
};

template<class ContainerAllocator>
struct DataType< ::inv_kinematics::footend_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "inv_kinematics/footend_pos";
  }

  static const char* value(const ::inv_kinematics::footend_pos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::inv_kinematics::footend_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 四足机器狗的落脚点坐标，各数组长度为3\n"
"float32[] footend_FL  # 左前腿\n"
"float32[] footend_FR  # 右前腿\n"
"float32[] footend_BL  # 左后腿\n"
"float32[] footend_BR  # 右后腿\n"
;
  }

  static const char* value(const ::inv_kinematics::footend_pos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::inv_kinematics::footend_pos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.footend_FL);
      stream.next(m.footend_FR);
      stream.next(m.footend_BL);
      stream.next(m.footend_BR);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct footend_pos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::inv_kinematics::footend_pos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::inv_kinematics::footend_pos_<ContainerAllocator>& v)
  {
    s << indent << "footend_FL[]" << std::endl;
    for (size_t i = 0; i < v.footend_FL.size(); ++i)
    {
      s << indent << "  footend_FL[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.footend_FL[i]);
    }
    s << indent << "footend_FR[]" << std::endl;
    for (size_t i = 0; i < v.footend_FR.size(); ++i)
    {
      s << indent << "  footend_FR[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.footend_FR[i]);
    }
    s << indent << "footend_BL[]" << std::endl;
    for (size_t i = 0; i < v.footend_BL.size(); ++i)
    {
      s << indent << "  footend_BL[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.footend_BL[i]);
    }
    s << indent << "footend_BR[]" << std::endl;
    for (size_t i = 0; i < v.footend_BR.size(); ++i)
    {
      s << indent << "  footend_BR[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.footend_BR[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // INV_KINEMATICS_MESSAGE_FOOTEND_POS_H
