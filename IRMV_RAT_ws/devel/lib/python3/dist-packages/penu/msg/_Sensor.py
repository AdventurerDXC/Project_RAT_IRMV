# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from penu/Sensor.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Sensor(genpy.Message):
  _md5sum = "8eea295248949e2a5a16594e9f20e338"
  _type = "penu/Sensor"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# pressure measurement
float64 pre_FB1
float64 pre_FB2
float64 pre_FB3
float64 pre_FB4
# cable measurement
float64 len_FB1
float64 len_FB2
float64 len_FB3
float64 len_FB4








"""
  __slots__ = ['pre_FB1','pre_FB2','pre_FB3','pre_FB4','len_FB1','len_FB2','len_FB3','len_FB4']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pre_FB1,pre_FB2,pre_FB3,pre_FB4,len_FB1,len_FB2,len_FB3,len_FB4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Sensor, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pre_FB1 is None:
        self.pre_FB1 = 0.
      if self.pre_FB2 is None:
        self.pre_FB2 = 0.
      if self.pre_FB3 is None:
        self.pre_FB3 = 0.
      if self.pre_FB4 is None:
        self.pre_FB4 = 0.
      if self.len_FB1 is None:
        self.len_FB1 = 0.
      if self.len_FB2 is None:
        self.len_FB2 = 0.
      if self.len_FB3 is None:
        self.len_FB3 = 0.
      if self.len_FB4 is None:
        self.len_FB4 = 0.
    else:
      self.pre_FB1 = 0.
      self.pre_FB2 = 0.
      self.pre_FB3 = 0.
      self.pre_FB4 = 0.
      self.len_FB1 = 0.
      self.len_FB2 = 0.
      self.len_FB3 = 0.
      self.len_FB4 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.pre_FB1, _x.pre_FB2, _x.pre_FB3, _x.pre_FB4, _x.len_FB1, _x.len_FB2, _x.len_FB3, _x.len_FB4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.pre_FB1, _x.pre_FB2, _x.pre_FB3, _x.pre_FB4, _x.len_FB1, _x.len_FB2, _x.len_FB3, _x.len_FB4,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.pre_FB1, _x.pre_FB2, _x.pre_FB3, _x.pre_FB4, _x.len_FB1, _x.len_FB2, _x.len_FB3, _x.len_FB4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.pre_FB1, _x.pre_FB2, _x.pre_FB3, _x.pre_FB4, _x.len_FB1, _x.len_FB2, _x.len_FB3, _x.len_FB4,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
